/*
 * Copyright (c) 1999-2004 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_APACHE_LICENSE_HEADER_START@
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * @APPLE_APACHE_LICENSE_HEADER_END@
 */
/*
 * bootstrap -- fundamental service initiator and port server
 * Mike DeMoney, NeXT, Inc.
 * Copyright, 1990.  All rights reserved.
 */

subsystem protocol_vproc 400;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>
#include "launchd_mig_types.defs"
import "libvproc_public.h";
import "libvproc_internal.h";

userprefix vproc_mig_;
serverprefix job_mig_;

routine create_server(
		__bs_port	: job_t;
		__server_cmd	: cmd_t;
		__server_uid	: uid_t;
		__on_demand	: boolean_t;
	out	__server_port	: mach_port_make_send_t);

skip; /* Last used in 10.4. Was bootstrap_unprivileged() */

routine check_in(
			__bs_port	: job_t;
			__service_name	: name_t;
		out	__service_port	: mach_port_move_receive_t);

routine register(
		__bs_port	: job_t;
		__service_name	: name_t;
		__service_port	: mach_port_t);

routine look_up(
		__bs_port	: job_t;
		__service_name	: name_t;
	out	__service_port	: mach_port_send_t);

skip; /* last used in 10.4 */

routine parent(
		__bs_port	: job_t;
	out	__parent_port	: mach_port_send_t);

skip; /* last used in 10.4 */

routine info(
		__bs_port	: job_t;
	out	__service_names	: name_array_t, dealloc;
	out __service_active	: bootstrap_status_array_t, dealloc);

routine subset(
		__bs_port	: job_t;
		__requestor_port: mach_port_t;
	out	__subset_port	: mach_port_make_send_t);

routine create_service(
		__bs_port	: job_t;
		__service_name	: name_t;
	out	__service_port	: mach_port_t);

routine take_subset(
		__bs_port	: job_t;
	out	__bs_reqport	: mach_port_t;
	out	__bs_rcvright	: mach_port_move_receive_t;
	out	__service_names	: name_array_t, dealloc;
	out	__service_ports	: mach_port_array_t, dealloc);

routine getsocket(
		__bs_port	: job_t;
	out	__sockpath	: name_t);

routine spawn(
		__bs_port	: job_t;
		__chars		: _internal_string_t;
		__argc		: uint32_t;
		__envc		: uint32_t;
		__flags		: uint64_t;
		__umask		: uint16_t;
		__binpref	: binpref_t;
		__binpref_cnt	: uint32_t;
	out	__pid		: pid_t;
	out	__obsvr_port	: mach_port_make_send_t);

routine wait(
		__bs_port	: job_t;
	sreplyport		__rport	: mach_port_make_send_once_t;
	out	__waitval	: integer_t);

routine uncork_fork(
		__bs_port	: job_t);

routine get_integer(
		__bs_port	: job_t;
		__key		: get_set_int_key_t;
	out	__val		: int64_t);

routine set_integer(
		__bs_port	: job_t;
		__key		: get_set_int_key_t;
		__val		: int64_t);

simpleroutine log(
		__bs_port	: job_t;
		__pri		: integer_t;
		__err		: integer_t;
		__msg		: logmsg_t);

routine lookup_per_user_context(
		__bs_port	: job_t;
		__wu		: uid_t;
	out	__u_cont	: mach_port_t);

routine move_subset_to_user(
		__bs_port	: job_t;
		__target_port	: mach_port_t);
