/*
 * Copyright (c) 1999-2004 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * "Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights
 * Reserved.  This file contains Original Code and/or Modifications of
 * Original Code as defined in and that are subject to the Apple Public
 * Source License Version 1.0 (the 'License').  You may not use this file
 * except in compliance with the License.  Please obtain a copy of the
 * License at http://www.apple.com/publicsource and read it before using
 * this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License."
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
/*
 * bootstrap -- fundamental service initiator and port server
 * Mike DeMoney, NeXT, Inc.
 * Copyright, 1990.  All rights reserved.
 */

subsystem bootstrap 400;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>
import "bootstrap_public.h";

/* MIG isn't very well documented. A coworker promises me that MIG promises
 * that a "c_string" will be NULL terminated on the server side in the event that a
 * client passed in a string longer than size specified here.
 */
type cmd_t			= c_string[512];
type name_t			= c_string[128];
type cmd_array_t		= ^array [] of cmd_t;
type name_array_t		= ^array [] of name_t;
type bootstrap_status_t		= integer_t;
type bootstrap_status_array_t	= ^array [] of bootstrap_status_t;

userprefix raw_;
serverprefix x_;

routine bootstrap_create_server(
		__bs_port	: mach_port_t;
		__server_cmd	: cmd_t;
		__server_uid	: natural_t;
		__on_demand	: boolean_t;
 ServerSecToken	__token		: security_token_t;
	out	__server_port	: mach_port_make_send_t);

routine bootstrap_unprivileged(
		__bs_port	: mach_port_t;
	out	__unpriv_port	: mach_port_make_send_t);

routine bootstrap_check_in(
			__bs_port	: mach_port_t;
			__service_name	: name_t;
		out	__service_port	: mach_port_move_receive_t);

routine bootstrap_register(
		__bs_port	: mach_port_t;
		__service_name	: name_t;
		__service_port	: mach_port_t);

routine bootstrap_look_up(
		__bs_port	: mach_port_t;
		__service_name	: name_t;
	out	__service_port	: mach_port_send_t);

skip;

routine bootstrap_parent(
		__bs_port	: mach_port_t;
 ServerSecToken	__token		: security_token_t;
	out	__parent_port	: mach_port_send_t);

skip;

routine bootstrap_info(
		__bs_port	: mach_port_t;
	out	__service_names	: name_array_t, dealloc;
	out __service_active	: bootstrap_status_array_t, dealloc);

routine bootstrap_subset(
		__bs_port	: mach_port_t;
		__requestor_port: mach_port_t;
	out	__subset_port	: mach_port_make_send_t);

routine bootstrap_create_service(
		__bs_port	: mach_port_t;
		__service_name	: name_t;
	out	__service_port	: mach_port_t);

routine bootstrap_transfer_subset(
		__bs_port	: mach_port_t;
	out	__bs_reqport	: mach_port_t;
	out	__bs_rcvright	: mach_port_move_receive_t;
	out	__service_names	: name_array_t, dealloc;
	out	__service_ports	: mach_port_array_t, dealloc);

routine bootstrap_getsocket(
		__bs_port	: mach_port_t;
	out	__sockpath	: name_t);
